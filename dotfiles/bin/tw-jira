#!/usr/bin/env python3
import argparse
import base64
from datetime import datetime
import json
import os
import pathlib
import re
import subprocess
import sys
import typing
import urllib.parse
import urllib.request

# UDAs
JIRA_KEY = "jira"
JIRA_STATUS = "jirastatus"
JIRA_PRIORITY = "jirapriority"
JIRA_PARENT = "jiraparent"
JIRA_ISSUE_TYPE = "jiraissuetype"

TW_DATE_FORMAT = "%Y%m%dT%H%M%SZ"


class TaskwarriorTask:
    def __init__(self, task_json: dict):
        self.json = task_json

    def __contains__(self, k) -> bool:
        return k in self.json

    def __getitem__(self, k) -> str:
        return self.json[k]

    def __repr__(self):
        return f"<TaskwarriorTask {self.uuid}>"

    @property
    def description(self) -> str:
        return self.json["description"]

    @property
    def uuid(self) -> str:
        return self.json["uuid"]

    @property
    def depends(self) -> typing.List[str]:
        return self.json.get("depends", [])

    @property
    def project(self) -> str | None:
        return self.json.get("project", None)

    @property
    def due(self) -> str | None:
        return self.json.get("due", None)

    @property
    def tags(self) -> typing.List[str]:
        return self.json.get("tags", [])

    @property
    def status(self) -> str:
        return self.json["status"]

    @property
    def entry(self) -> str:
        return self.json["entry"]

    @property
    def entry_dt(self) -> datetime:
        return datetime.strptime(self.entry, "%Y%m%dT%H%M%SZ")

    @property
    def jira(self) -> str | None:
        return self.json.get("jira", None)


class JiraIssue:
    def __init__(self, issue_json: dict):
        self.json = issue_json

    def __repr__(self):
        return f'<Issue {self.key}>'

    @property
    def key(self) -> str:
        return self.json["key"]

    @property
    def fields(self) -> dict:
        return self.json["fields"]

    @property
    def status(self) -> str:
        return self.fields["status"]["name"]

    @property
    def priority(self) -> str:
        return self.fields["priority"]["name"]

    @property
    def summary(self) -> str:
        return self.fields["summary"]

    @property
    def parent(self) -> typing.Optional['JiraIssue']:
        if "parent" in self.fields and self.fields["parent"]:
            return JiraIssue(self.fields["parent"])
        else:
            return None

    @property
    def issue_type(self) -> str:
        return self.fields["issuetype"]["name"]

    @property
    def created(self) -> str:
        return datetime.fromisoformat(self.fields["created"]).replace(microsecond=0, tzinfo=None).strftime(TW_DATE_FORMAT)


class Reconciler:
    def __init__(self, issue: JiraIssue | None, task: TaskwarriorTask | None):
        self.issue = issue
        self.task = task

        # desired state
        self.desired_dependencies: set[str] = set()
        self.desired_project: str | None = None
        self.desired_due: str | None = None
        self.desired_tags: set[str] = set()

    def __repr__(self):
        return f"<Reconciler {self.issue} {self.task}>"

    def needs_creation(self) -> bool:
        return self.task is None

    def base_task_template(self) -> dict[str, str]:
        if self.issue is None:
            raise Exception("cannot make a base task template with a missing issue")

        out = {
            "description": self.issue.summary,
            JIRA_KEY: self.issue.key,
            JIRA_STATUS: self.issue.status.replace(" ", "-").lower(),
            JIRA_PRIORITY: self.issue.priority.replace(" ", "-").lower(),
            JIRA_ISSUE_TYPE: self.issue.issue_type.replace(" ", "-").lower(),
            "entry": self.issue.created,
        }

        if self.issue.parent:
            out[JIRA_PARENT] = self.issue.parent.key

        return out

    def mods(self) -> list[str]:
        if self.issue is None or self.task is None:
            raise Exception("need both issue and task to make mods")

        mods: list[str] = []

        # Dependencies
        mods.extend(
            f"dep:{dep}"
            for dep
            in self.desired_dependencies - set(self.task.depends)
        )

        # Project
        if self.desired_project and self.desired_project != self.task.project:
            mods.append(f"pro:{self.desired_project}")

        # Due
        if self.desired_due and self.desired_due != self.task.due:
            mods.append(f"due:{self.desired_due}")

        # Tags
        mods.extend(
            f"+{tag}"
            for tag
            in self.desired_tags - set(self.task.tags)
        )

        base = self.base_task_template()
        for (key, value) in base.items():
            if key == 'description' and value != self.task.description:
                mods.append(value)
            elif key not in self.task or self.task[key] != base[key]:
                mods.append(f"{key}:{value}")

        return mods

    def reconcile(self):
        if self.issue is None or self.task is None:
            raise Exception("need both issue and task to reconcile")

        mods = self.mods()
        if mods:
            eprint(f"updating {self.issue.key}: {" ".join(mods)}")
            subprocess.run(["task", self.task.uuid, "mod", *mods])

    def create(self):
        if self.issue is None or self.task is not None:
            raise Exception("need to be missing issue and not missing task")

        eprint(f"creating task for {self.issue.key}")
        output = subprocess.run(
            ["task", "import"],
            capture_output=True,
            input=json.dumps(self.base_task_template()).encode("utf-8")
        ).stdout.decode("utf-8")

        match = re.match("^ add  ([^ ]+?) ", output.split("\n")[1])
        if not match:
            raise Exception(f"no UUID matched in `{output}`")

        self.task = TaskwarriorTask(json.loads(
            subprocess.run(
                ["task", match.groups()[0], "export"],
                capture_output=True,
            ).stdout.decode("utf-8")
        )[0])

    def add_dependency(self, other: typing.Self):
        if not other.task:
            raise Exception("cannot set a dependency with a missing task")

        self.desired_dependencies.add(other.task.uuid)

    def set_project(self, project: str):
        self.desired_project = project

    def set_due(self, due: str):
        self.desired_due = due

    def add_tags(self, tags: set[str]):
        for tag in tags:
            self.desired_tags.add(tag)

    # Accessors for setting hierarchy

    @property
    def jira_parent(self) -> JiraIssue | None:
        if self.issue is None:
            raise Exception("missing issue")

        return self.issue.parent


class Fetcher:
    def __init__(self, base: str, username: str, token: str):
        self.base = base
        self.username = username
        self.token = token

    def __get(self, path):
        jira_url = f"{self.base}/{path}"

        # Encode credentials
        credentials = f'{self.username}:{self.token}'
        encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')

        # Setup request
        request = urllib.request.Request(jira_url)
        request.add_header('Authorization', f'Basic {encoded_credentials}')
        request.add_header('Content-Type', 'application/json')

        with urllib.request.urlopen(request) as response:
            data = response.read()
            return json.loads(data)

    def search(self, query: str) -> typing.List[JiraIssue]:
        encoded_jql = urllib.parse.quote(query)

        tasks = self.__get(f"/rest/api/2/search?jql={encoded_jql}")
        return [JiraIssue(blob) for blob in tasks["issues"]]

    def issue(self, id: str) -> JiraIssue:
        return JiraIssue(self.__get(f"/rest/api/2/issue/{id}"))


class Main:
    def __init__(self, fetcher: Fetcher):
        self.fetcher = fetcher

        # all of these are indexed by the Jira key
        self.issues: typing.Dict[str, JiraIssue] = {}
        self.tasks: typing.Dict[str, TaskwarriorTask] = {}
        self.reconcilers: typing.Dict[str, Reconciler] = {}

    def fetch_assigned_and_open_issues(self):
        eprint("fetching assigned and open issues")
        self.issues = {
            issue.key: issue
            for issue in
            self.fetcher.search('assignee = currentUser() AND status != "Closed" AND status != "Resolved" AND status != "Done"')
        }

    def backfill_parent_issues(self):
        """backfill any parent issues that aren't assigned to the current user"""
        backfilled = False
        while not backfilled:
            backfilled = True

            for issue in list(self.issues.values()):
                if issue.parent and issue.parent.key not in self.issues:
                    new_issue = self.fetcher.issue(issue.parent.key)
                    eprint(f"backfilling parent {new_issue.key}")
                    self.issues[new_issue.key] = new_issue
                    backfilled = False

    def backfill_tasks_in_tw_but_not_jira(self):
        for reconciler in self.reconcilers.values():
            if reconciler.issue:
                continue

            if not reconciler.task:
                raise Exception("cannot have a reconciler missing both task and issue")

            if not reconciler.task.jira:
                raise Exception("how did we even get a task without a jira UDA?")

            eprint(f"backfilling issue for task {reconciler.task.jira}")
            reconciler.issue = self.fetcher.issue(reconciler.task.jira)

    def fetch_tasks(self):
        """fetch Jira tasks from Taskwarrior"""
        eprint("fetching Taskwarrior tasks")
        self.tasks = {
            task[JIRA_KEY]: TaskwarriorTask(task)
            for task in
            json.loads(subprocess.run(["task", "export"], capture_output=True).stdout.decode('utf-8'))
            if JIRA_KEY in task
        }

    def associate(self):
        self.reconcilers = {
            key: Reconciler(self.issues.get(key), self.tasks.get(key))
            for key
            in set(self.issues).union(set(self.tasks))
        }

    def create_new_tasks(self):
        for reconciler in self.reconcilers.values():
            if reconciler.needs_creation():
                reconciler.create()

    def set_inheritance(self):
        for issue in self.reconcilers.values():
            hierarchy = [issue]
            while hierarchy[-1].jira_parent:
                hierarchy.append(self.reconcilers[hierarchy[-1].jira_parent.key])

            # go from child -> parent to parent -> child
            hierarchy.reverse()

            self.__set_dependency_hierarchy(hierarchy)
            self.__set_attribute_hierarchy(hierarchy)

    def __set_dependency_hierarchy(self, hierarchy: list[Reconciler]):
        for (parent, child) in zip(hierarchy, hierarchy[1:]):
            parent.add_dependency(child)

    def __set_attribute_hierarchy(self, hierarchy: list[Reconciler]):
        project: str | None = None
        due: str | None = None
        tags: set[str] = set()

        for reconciler in hierarchy:
            task = reconciler.task
            if task is None:
                raise Exception("can't inherit attrs with a missing task")

            # Project
            if project is None and task.project is not None:
                project = task.project
            if project is not None:
                reconciler.set_project(project)

            # Due
            if due is None and task.due is not None:
                due = task.due
            if due is not None:
                reconciler.set_due(due)

            # Tags
            for tag in task.tags:
                tags.add(tag)
            if tags:
                reconciler.add_tags(tags)

    def run(self):
        self.fetch_assigned_and_open_issues()
        self.backfill_parent_issues()
        self.fetch_tasks()

        # now that we have the information from both sides, associate them to
        # create our reconcilers
        self.associate()

        # grab any tasks that didn't match our earlier filters
        self.backfill_tasks_in_tw_but_not_jira()

        # create any tasks that are in Jira but not Taskwarrior
        self.create_new_tasks()

        # pass dependencies, projects, tags, etc down from parent to child tasks
        self.set_inheritance()

        # update all the tasks that need it
        for reconciler in self.reconcilers.values():
            reconciler.reconcile()


def eprint(*args, **kwargs):
    print(*args, **kwargs, file=sys.stderr)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--base", default="https://paynearme.atlassian.net")
    parser.add_argument("--username", default="brian.hicks@paynearme.com")
    parser.add_argument("--token", default=os.environ.get("JIRA_TOKEN", ""))

    args = parser.parse_args()

    if not args.token:
        try:
            with open(os.path.join(pathlib.Path.home(), ".config", "tw-jira-config")) as fh:
                args.token = fh.read().strip()
        except IOError as err:
            print("I couldn't find a Jira token in --token, JIRA_TOKEN, or in the path listed in the error below. Populate one of those and try again!", file=sys.stderr)
            print(file=sys.stderr)
            print(err, file=sys.stderr)
            sys.exit(1)

    Main(Fetcher(args.base, args.username, args.token)).run()
